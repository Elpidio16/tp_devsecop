pipeline {
    agent any

    environment {
        // Nom de l'environnement SonarQube défini dans Jenkins
        SONARQUBE_ENV = 'sonarqube_scanner'
        // Nom du profil Maven si nécessaire
        MAVEN_PROFILE = 'sonar'
    }

    stages {
        stage('Checkout Code') {
            steps {
                // Récupérer le code source
                checkout scm
            }
        }

        stage('Build Project') {
            steps {
                script {
                    try {
                        // Construire le projet Maven
                        sh 'mvn clean package'
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error "Échec de la compilation Maven : ${e.message}"
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    try {
                        // Lancer l'analyse SonarQube avec le plugin Maven
                        withSonarQubeEnv("${SONARQUBE_ENV}") {
                            sh "mvn sonar:sonar -P${MAVEN_PROFILE}"
                        }
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error "Échec de l'analyse SonarQube : ${e.message}"
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    // Vérifier que le Quality Gate SonarQube est passé
                    timeout(time: 2, unit: 'MINUTES') {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline terminé."
        }
        success {
            echo "Pipeline exécuté avec succès."
        }
        failure {
            echo "Le pipeline a échoué."
        }
    }
}
